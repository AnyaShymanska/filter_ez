{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.guard.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/confirm-email/confirm-email.component.css","webpack:///./src/app/confirm-email/confirm-email.component.html","webpack:///./src/app/confirm-email/confirm-email.component.ts","webpack:///./src/app/confirm-reset/confirm-reset.component.css","webpack:///./src/app/confirm-reset/confirm-reset.component.html","webpack:///./src/app/confirm-reset/confirm-reset.component.ts","webpack:///./src/app/directives/text-format.directive.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/logout/logout.component.css","webpack:///./src/app/logout/logout.component.html","webpack:///./src/app/logout/logout.component.ts","webpack:///./src/app/models/user.ts","webpack:///./src/app/navbar/navbar.component.css","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/notfound/notfound.component.css","webpack:///./src/app/notfound/notfound.component.html","webpack:///./src/app/notfound/notfound.component.ts","webpack:///./src/app/registration/registration.component.css","webpack:///./src/app/registration/registration.component.html","webpack:///./src/app/registration/registration.component.ts","webpack:///./src/app/reset-password/reset-password.component.css","webpack:///./src/app/reset-password/reset-password.component.html","webpack:///./src/app/reset-password/reset-password.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {HomeComponent} from \"./home/home.component\";\nimport {NotfoundComponent} from \"./notfound/notfound.component\";\nimport {RegistrationComponent} from \"./registration/registration.component\";\nimport {AuthGuard} from \"./auth.guard\";\nimport {ConfirmEmailComponent} from \"./confirm-email/confirm-email.component\";\nimport {LoginComponent} from \"./login/login.component\";\nimport {LogoutComponent} from \"./logout/logout.component\"\nimport {ResetPasswordComponent} from \"./reset-password/reset-password.component\"\nimport {ConfirmResetComponent} from \"./confirm-reset/confirm-reset.component\"\n\nconst routes: Routes = [\n    {path: '', component: HomeComponent},\n    {path: 'register', component: RegistrationComponent, canActivate: [AuthGuard]},\n    {path: 'confirm/:token', component: ConfirmEmailComponent},\n    {path: 'login', component: LoginComponent},\n    {path: 'logout', component: LogoutComponent},\n    {path: 'reset', component: ResetPasswordComponent},\n    {path: 'reset_password_confirm/:token', component: ConfirmResetComponent},\n    {path: '**', component: NotfoundComponent},\n];\n\n@NgModule({\n    exports: [RouterModule],\n    imports: [RouterModule.forRoot(routes)],\n})\nexport class AppRoutingModule {\n}\n","module.exports = \".navbar{\\nbackground-color: rgb(22, 17, 17);\\nborder-radius: 4px;\\n}\"","module.exports = \"<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { NotfoundComponent } from './notfound/notfound.component';\nimport { HomeComponent } from './home/home.component';\nimport { ConfirmEmailComponent } from './confirm-email/confirm-email.component';\nimport { LoginComponent } from './login/login.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { LogoutComponent } from './logout/logout.component';\nimport { ConfirmResetComponent } from './confirm-reset/confirm-reset.component';\nimport { NavbarComponent } from './navbar/navbar.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RegistrationComponent,\n    NotfoundComponent,\n    HomeComponent,\n    ConfirmEmailComponent,\n    LoginComponent,\n    LogoutComponent,\n    ResetPasswordComponent,\n    ConfirmResetComponent,\n    NavbarComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n      ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {User} from \"./models/user\";\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    login_api_url = \"api/login\";\n    register_api_url = \"api/register\";\n    confirm_url = \"api/confirm/\";\n    logout_api_url = \"api/logout\";\n    reset_password_url = \"api/reset\";\n    reset_password_confirm_api = \"api/password_reset\";\n\n    constructor(\n        private _http: HttpClient,\n    ) {\n    }\n\n    toRegister(user: User): Observable<any> {\n        return this._http.post<any>(this.register_api_url, user)\n            .pipe(\n                tap(\n                    data => console.log(data),\n                    error => console.log(error)\n                )\n            );\n    }\n\n    toLogin(user: User): Observable<any> {\n        return this._http.post<any>(this.login_api_url, user);\n    }\n\n    toLogout(user: User): Observable<any> {\n        return this._http.post<any>(this.logout_api_url, user);\n    }\n\n    toResetPassword(email: string): Observable<any> {\n\n        return this._http.post<any>(this.reset_password_url, {'email': email})\n    }\n\n    toResetPasswordConfirm(token, password: string): Observable<any> {\n        console.log(\"asfasfasf\");\n        return this._http.put<any>(this.reset_password_confirm_api+'/'+token, {'password': password})\n    }\n\n    confirmEmail(token: string): Observable<any> {\n\n        return this._http.get<any>(this.confirm_url + token);\n    }\n\n}\n","module.exports = \"\"","module.exports = \"  You have confirmed registration. Proceed to <a routerLink=\\\"\\\">home page</a>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n\n@Component({\n    selector: 'app-confirm-email',\n    templateUrl: './confirm-email.component.html',\n    styleUrls: ['./confirm-email.component.css']\n})\nexport class ConfirmEmailComponent implements OnInit {\n    returnUrl: string = '/login';\n\n    constructor(\n        private auth: AuthService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) {\n\n    }\n\n    ngOnInit() {\n\n        this.auth.confirmEmail(this.route.snapshot.params[\"token\"])\n            .subscribe(res => this.router.navigate([this.returnUrl]));\n    }\n\n}\n","module.exports = \"@media(min-width: 768px) {\\n    .field-label-responsive {\\n      padding-top: .5rem;\\n      text-align: right;\\n      \\n    }\\n\\n  }\"","module.exports = \"<div class=\\\"auth\\\">\\n    <div class=\\\"form\\\">\\n        <form [formGroup]=\\\"resetPasswordGroup\\\" (ngSubmit)=\\\"toConfirmReset()\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\">\\n                    <h2>Register New User</h2>\\n                    <hr>\\n                    <br><br>\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"password\\\"> New password</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group has-danger\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-key\\\"></i></div>\\n                            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\"\\n                                   placeholder=\\\"Password\\\" required>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"password\\\">Confirm password</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group has-danger\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-key\\\"></i></div>\\n                            <input type=\\\"password\\\" formControlName=\\\"password_confirm\\\" class=\\\"form-control\\\"\\n                                   id=\\\"password_confirm\\\"\\n                                   placeholder=\\\"Password\\\" required>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n                        <ul>\\n                            <li *ngIf=\\\"password.errors.minlength || password.errors.maxlength\\\">Password must be from 8\\n                                to 40\\n                                characters long\\n                            </li>\\n                            <li *ngIf=\\\"password.errors.wrongFormat\\\">Password must contain at least one digit</li>\\n\\n                        </ul>\\n                    </div>\\n                    <div class=\\\"alert alert-danger\\\"\\n                         *ngIf=\\\"resetPasswordGroup.valid && password.value != password_confirm.value\\\">\\n                        Passwords does not match\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\">\\n                    <button class=\\\"btn btn-success\\\" type=\\\"submit\\\"\\n                            [disabled]=\\\"!resetPasswordGroup.valid && password.value != password_confirm.value\\\">Submit\\n                    </button>\\n                </div>\\n                <div class=\\\"col-md-3\\\"></div>\\n            </div>\\n\\n        </form>\\n    </div>\\n</div>\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TextFormatDirective} from \"../directives/text-format.directive\";\nimport {AuthService} from \"../auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-confirm-reset',\n    templateUrl: './confirm-reset.component.html',\n    styleUrls: ['./confirm-reset.component.css']\n})\nexport class ConfirmResetComponent implements OnInit {\n    returnUrl: string;\n    resetPasswordGroup = new FormGroup({\n        password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ]),\n        password_confirm: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ])\n    });\n\n    toConfirmReset() {\n        if (this.resetPasswordGroup.controls['password'].value ===\n            this.resetPasswordGroup.controls['password_confirm'].value) {\n            this.auth_.toResetPasswordConfirm(\n                this.route.snapshot.params[\"token\"],\n                this.resetPasswordGroup.controls['password'].value\n            ).subscribe(res => this.router.navigate([this.returnUrl]\n            ))\n        }\n    }\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    get password() {\n        return this.resetPasswordGroup.get('password')\n    }\n\n    get password_confirm() {\n        return this.resetPasswordGroup.get('password_confirm')\n    }\n\n    ngOnInit() {\n        this.returnUrl = '/login';\n    }\n\n}\n","import {AbstractControl, ValidatorFn} from \"@angular/forms\";\n\n\nexport function TextFormatDirective(nameRe: RegExp): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} | null => {\n        const correct = nameRe.test(control.value);\n        return correct ? null : {'wrongFormat': {value: control.value}} ;\n    };\n}","module.exports = \"\"","module.exports = \"<p>\\n    TODO: home page which is accessible if user is logged in\\n</p>\\n<form action=\\\"{{ url_for('uploader') }}\\\"\\n      method=\\\"post\\\"\\n      enctype=\\\"multipart/form-data\\\">\\n    <input type=\\\"file\\\" name=\\\"uploaded_file\\\"/>\\n    <input type=\\\"submit\\\"/>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"@media(min-width: 768px) {\\n    .field-label-responsive {\\n      padding-top: .5rem;\\n      text-align: right;\\n    }\\n  }\\n#error{\\n    display: none;\\n}\"","module.exports = \"<div class=\\\"auth\\\">\\n    <div class=\\\"form\\\">\\n        <form class=\\\"form-horizontal\\\" [formGroup]=\\\"loginGroup\\\" (ngSubmit)=\\\"toLogin()\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <h3>Please enter your email and password</h3>\\n                    <hr>\\n                    <br><br>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"email\\\">E-Mail Address</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-at\\\"></i></div>\\n                            <input type=\\\"text\\\" formControlName=\\\"email\\\" required class=\\\"form-control\\\" id=\\\"email\\\"\\n                                   placeholder=\\\"you@example.com\\\" autofocus>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"password\\\">Password</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group has-danger\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-key\\\"></i></div>\\n                            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\"\\n                                   placeholder=\\\"Password\\\" required>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <strong>\\n                        <div id=\\\"error\\\" class=\\\"alert alert-warning\\\">\\n\\n\\n                        </div>\\n                    </strong>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\"\\n                         class=\\\"alert alert-danger\\\">\\n\\n                        <div *ngIf=\\\"email.errors.required\\\">\\n                            Email is required.\\n                        </div>\\n                        <div *ngIf=\\\"email.errors.wrongFormat\\\">\\n                            Wrong format of email\\n                        </div>\\n                    </div>\\n                    <div *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\"\\n                         class=\\\"alert alert-danger\\\">\\n                        <div *ngIf=\\\"password.errors || password.errors\\\">Password must be from 8\\n                            to 40 characters long and contain at least one digit.\\n                        </div>\\n                    </div>\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"message\\\">\\n                        {{ message }}\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\"><a href=\\\"#\\\" routerLink='/reset'><span class=\\\"glyphicon glyphicon-user\\\"></span>Forgot\\n                    your\\n                    password?</a>\\n                </div>\\n                <div class=\\\"col-md-3\\\"></div>\\n            </div>\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!loginGroup.valid\\\"> Login</button>\\n                </div>\\n            </div>\\n\\n        </form>\\n    </div>\\n</div>\\n  \"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../auth.service\";\nimport {User} from \"../models/user\";\nimport {style} from \"@angular/animations\";\nimport {TextFormatDirective} from \"../directives/text-format.directive\";\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    returnUrl: string;\n    message : string;\n    loginGroup = new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            TextFormatDirective(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/)\n\n        ]),\n        password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ])\n    });\n\n    toLogin() {\n        this.auth_.toLogin(new User(this.loginGroup.controls['email'].value,\n            this.loginGroup.controls['password'].value))\n            .subscribe(\n                res => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                err => {\n                    let data_txt = (JSON.stringify(err));\n                    let error_data = JSON.parse(data_txt);\n                    this.message = error_data.error.message.toString()\n                },\n            )\n    }\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    get password() {\n        return this.loginGroup.get('password')\n    }\n\n    get email() {\n        return this.loginGroup.get('email')\n    }\n\n    ngOnInit() {\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n}\n","module.exports = \"\"","module.exports = \"\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../auth.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {User} from \"../models/user\";\n\n@Component({\n    selector: 'app-logout',\n    templateUrl: './logout.component.html',\n    styleUrls: ['./logout.component.css']\n})\nexport class LogoutComponent implements OnInit {\n    returnUrl: string = '/login';\n    name: string;\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n        \n        this.auth_.toLogout(null).subscribe(\n            res => {\n                this.router.navigate([this.returnUrl]);\n            },\n        )\n           }\n           \n           \n}\n","export class User {\n    email: string;\n    password: string;\n\n    constructor(email, pass: string) {\n        this.email = email;\n        this.password = pass;\n    }\n\n\n}\n","module.exports = \"@import url(\\\"//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\\\");\\n\\n.navbar-icon-top .navbar-nav .nav-link > .fa {\\n  position: relative;\\n  width: 36px;\\n  font-size: 24px;\\n}\\n\\n.nav-right{\\n  text-align: right;\\n}\\n\\n.navbar-icon-top .navbar-nav .nav-link > .fa > .badge {\\n  font-size: 0.75rem;\\n  position: absolute;\\n  right: 0;\\n  font-family: sans-serif;\\n}\\n\\n.navbar-icon-top .navbar-nav .nav-link > .fa {\\n  top: 3px;\\n  line-height: 12px;\\n}\\n\\n.navbar-icon-top .navbar-nav .nav-link > .fa > .badge {\\n  top: -10px;\\n}\\n\\n@media (min-width: 576px) {\\n  .navbar-icon-top.navbar-expand-sm .navbar-nav .nav-link {\\n    text-align: center;\\n    display: table-cell;\\n    height: 70px;\\n    vertical-align: middle;\\n    padding-top: 0;\\n    padding-bottom: 0;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-sm .navbar-nav .nav-link > .fa {\\n    display: block;\\n    width: 48px;\\n    margin: 2px auto 4px auto;\\n    top: 0;\\n    line-height: 24px;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-sm .navbar-nav .nav-link > .fa > .badge {\\n    top: -7px;\\n  }\\n}\\n\\n@media (min-width: 768px) {\\n  .navbar-icon-top.navbar-expand-md .navbar-nav .nav-link {\\n    text-align: center;\\n    display: table-cell;\\n    height: 70px;\\n    vertical-align: middle;\\n    padding-top: 0;\\n    padding-bottom: 0;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-md .navbar-nav .nav-link > .fa {\\n    display: block;\\n    width: 48px;\\n    margin: 2px auto 4px auto;\\n    top: 0;\\n    line-height: 24px;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-md .navbar-nav .nav-link > .fa > .badge {\\n    top: -7px;\\n  }\\n}\\n\\n@media (min-width: 992px) {\\n  .navbar-icon-top.navbar-expand-lg .navbar-nav .nav-link {\\n    text-align: center;\\n    display: table-cell;\\n    height: 70px;\\n    vertical-align: middle;\\n    padding-top: 0;\\n    padding-bottom: 0;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-lg .navbar-nav .nav-link > .fa {\\n    display: block;\\n    width: 48px;\\n    margin: 2px auto 4px auto;\\n    top: 0;\\n    line-height: 24px;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-lg .navbar-nav .nav-link > .fa > .badge {\\n    top: -7px;\\n  }\\n}\\n\\n@media (min-width: 1200px) {\\n  .navbar-icon-top.navbar-expand-xl .navbar-nav .nav-link {\\n    text-align: center;\\n    display: table-cell;\\n    height: 70px;\\n    vertical-align: middle;\\n    padding-top: 0;\\n    padding-bottom: 0;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-xl .navbar-nav .nav-link > .fa {\\n    display: block;\\n    width: 48px;\\n    margin: 2px auto 4px auto;\\n    top: 0;\\n    line-height: 24px;\\n  }\\n\\n  .navbar-icon-top.navbar-expand-xl .navbar-nav .nav-link > .fa > .badge {\\n    top: -7px;\\n  }\\n}\\n\"","module.exports = \"<nav class=\\\"navbar navbar-icon-top navbar-expand-lg navbar-dark bg-dark\\\">\\n    <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">Navbar</a>\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\"\\n            aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n        <ul class=\\\"navbar-nav mr-auto\\\">\\n            <li class=\\\"nav-item active\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"/\\\">\\n                    <i class=\\\"fa fa-home\\\"></i>\\n                    Home\\n                </a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\">\\n                    Messages\\n                </a>\\n            </li>\\n            <li class=\\\"nav-item active nav-right\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"/login\\\">\\n                    Login\\n                </a>\\n            </li>\\n            <li class=\\\"nav-item active nav-right\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"/register\\\">\\n                    Sign up\\n                </a>\\n            </li>\\n            <li class=\\\"nav-item active nav-right\\\">\\n                <a class=\\\"nav-link\\\" routerLink=\\\"/logout\\\">\\n                    Logout\\n                </a>\\n            </li>\\n\\n        </ul>\\n\\n    </div>\\n</nav>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\nbody{\\n\\tfont-family: 'Courgette', cursive;\\n}\\nbody{\\n\\tbackground:#f3f3e1;\\n}\\n.wrap{\\n\\tmargin:0 auto;\\n\\twidth:1000px;\\n}\\n.logo{\\n\\tmargin-top:50px;\\n}\\n.logo h1{\\n\\tfont-size:200px;\\n\\tcolor:#8F8E8C;\\n\\ttext-align:center;\\n\\tmargin-bottom:1px;\\n\\ttext-shadow:1px 1px 6px #fff;\\n}\\n.logo p{\\n\\tcolor:rgb(228, 146, 162);\\n\\tfont-size:20px;\\n\\tmargin-top:1px;\\n\\ttext-align:center;\\n}\\n.logo p span{\\n\\tcolor:lightgreen;\\n}\\n.sub a{\\n\\tcolor:white;\\n\\tbackground:#8F8E8C;\\n\\ttext-decoration:none;\\n\\tpadding:7px 120px;\\n\\tfont-size:13px;\\n\\tfont-family: arial, serif;\\n\\tfont-weight:bold;\\n\\t-webkit-border-radius:3em;\\n\\t-moz-border-radius:.1em;\\n\\t-border-radius:.1em;\\n}\\n.footer{\\n\\tcolor:#8F8E8C;\\n\\tposition:absolute;\\n\\tright:10px;\\n\\tbottom:10px;\\n}\\n.footer a{\\n\\tcolor:rgb(228, 146, 162);\\n}\\t\\n\"","module.exports = \"<div class=\\\"logo\\\">\\n\\n    <h1>404 not found</h1>\\n    <p>Error occurred! - File not Found</p>\\n\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notfound',\n  templateUrl: './notfound.component.html',\n  styleUrls: ['./notfound.component.css']\n})\nexport class NotfoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"@media(min-width: 768px) {\\n  .field-label-responsive {\\n    padding-top: .5rem;\\n    text-align: right;\\n  }\\n}\\n#error{\\n    display: none;\\n}\"","module.exports = \"<div class=\\\"auth\\\">\\n    <div class=\\\"form\\\">\\n        <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div *ngIf=\\\"confirm_message\\\" class=\\\"alert alert-success\\\">\\n                        <br><br>{{ confirm_message }}\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n        <form class=\\\"form-horizontal\\\"  [formGroup]=\\\"registerGroup\\\" (ngSubmit)=\\\"toRegister()\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\">\\n                    <h2>Register New User</h2>\\n                    <hr>\\n                    <br><br>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"email\\\">E-Mail Address</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-at\\\"></i></div>\\n                            <input type=\\\"text\\\" formControlName=\\\"email\\\" required class=\\\"form-control\\\" id=\\\"email\\\"\\n                                   placeholder=\\\"you@example.com\\\" autofocus>\\n\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div *ngIf=\\\"email == ''\\\">\\n                        Email can not be empty\\n                    </div>\\n                    <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\"\\n                         class=\\\"alert alert-danger\\\">\\n\\n                        <div *ngIf=\\\"email.errors.required\\\">\\n                            Email is required.\\n                        </div>\\n                        <div *ngIf=\\\"email.errors.wrongFormat\\\">\\n                            Wrong format of email.\\n                        </div>\\n\\n\\n\\n                    </div>\\n                    <div class=\\\" alert alert-danger\\\" *ngIf=\\\"isEmailBusy == true\\\">\\n                            {{ error_message }}\\n                        </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"password\\\">Password</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group has-danger\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-key\\\"></i></div>\\n                            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\"\\n                                   placeholder=\\\"Password\\\" required>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                     <div class=\\\"alert alert-danger\\\" *ngIf=\\\"password.invalid && (password.dirty || password.touched)\\\">\\n                        <ul>\\n                            <li *ngIf=\\\"password.errors || password.errors\\\">Password must be from 8\\n                                to 40 characters long and contain at least one digit.\\n                            </li>\\n                        </ul>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\"></div>\\n                <div class=\\\"col-md-6\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!registerGroup.valid\\\"> Register</button>\\n                </div>\\n            </div>\\n\\n        </form>\\n    </div>\\n</div>\\n\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {TextFormatDirective} from \"../directives/text-format.directive\";\nimport {AuthService} from \"../auth.service\";\n\nimport {User} from \"../models/user\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-registration',\n    templateUrl: './registration.component.html',\n    styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n    returnUrl: string;\n    isEmailBusy: boolean = false;\n    error_message : string;\n    confirm_message : string;\n\n    registerGroup =  new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            TextFormatDirective(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/)\n\n        ]),\n        password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(40),\n            TextFormatDirective(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/),\n        ])\n      });\n\n    toRegister() {\n        this.auth_.toRegister(new User(this.registerGroup.controls['email'].value,\n            this.registerGroup.controls['password'].value))\n            .subscribe(\n                res => {\n                    localStorage.setItem('token', res.token);\n                    this.confirm_message = \"We send you confirmation token. Please check your email\";\n                    this.registerGroup = null\n                },\n                err => {\n                    this.isEmailBusy =true;\n                    let data_txt = (JSON.stringify(err));\n                    let error_data = JSON.parse(data_txt);\n                    this.error_message = error_data.error.message.toString();\n                })\n    }\n\n\n    get password() {\n        return this.registerGroup.get('password')\n    }\n    get email(){\n        return this.registerGroup.get('email')\n    }\n\n\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n}\n","module.exports = \"@media(min-width: 768px) {\\n  .field-label-responsive {\\n    padding-top: .5rem;\\n    text-align: right;\\n  }\\n}\\n#error{\\n    display: none;\\n}\\n#input_form{\\n    display: none;\\n}\"","module.exports = \"<div class=\\\"auth\\\">\\n    <div class=\\\"form\\\">\\n        <form id=\\\"reset-password\\\" [formGroup]=\\\"resetPasswordGroup\\\" (ngSubmit)=\\\"toResetPassword()\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <h3>Enter your registration email.</h3>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3 field-label-responsive\\\">\\n                    <label for=\\\"email\\\">E-Mail Address</label>\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <div class=\\\"input-group mb-2 mr-sm-2 mb-sm-0\\\">\\n                            <div class=\\\"input-group-addon\\\" style=\\\"width: 2.6rem\\\"><i class=\\\"fa fa-at\\\"></i></div>\\n                            <input type=\\\"text\\\" formControlName=\\\"email\\\" required class=\\\"form-control\\\"\\n                                   placeholder=\\\"you@example.com\\\" autofocus>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!resetPasswordGroup.valid\\\"> Send</button>\\n                </div>\\n\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div *ngIf=\\\"email == ''\\\">\\n                        Email can not be empty\\n                    </div>\\n                    <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\"\\n                         class=\\\"alert alert-danger\\\">\\n                        <div *ngIf=\\\"email.errors.required\\\">\\n                            Email is required.\\n                        </div>\\n                        <div *ngIf=\\\"email.errors.wrongFormat\\\">\\n                            Wrong format of email.\\n                        </div>\\n                    </div>\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"error_message\\\">\\n                        {{ error_message }}\\n                    </div>\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n\\n            </div>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n                <div class=\\\"col-md-6\\\">\\n                    <div *ngIf=\\\"confirm_message\\\">\\n                        <div class=\\\"alert alert-success row \\\">\\n                            We send you confirnation token. Please check your email.\\n                        </div>\\n                    </div>\\n\\n                </div>\\n                <div class=\\\"col-md-3\\\">\\n\\n                </div>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from \"../auth.service\";\n\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {TextFormatDirective} from \"../directives/text-format.directive\";\n\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n    confirm_message :boolean;\n    error_message : string;\n    resetPasswordGroup = new FormGroup({\n        email: new FormControl('', [\n            Validators.required,\n            TextFormatDirective(/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/)\n\n        ])\n      });\n\n    toResetPassword() {\n        this.auth_.toResetPassword(this.resetPasswordGroup.controls['email'].value)\n            .subscribe(\n                res => {\n                    this.confirm_message = true;\n\n                }, err => {\n                    let data_txt = (JSON.stringify(err));\n                    let error_data = JSON.parse(data_txt);\n                    this.error_message = err.error.message.toString();\n                },\n            )\n    }\n    get email(){\n        return this.resetPasswordGroup.get('email')\n    }\n    constructor(\n        private auth_: AuthService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));"],"sourceRoot":""}